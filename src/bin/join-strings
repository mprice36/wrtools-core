#!CONFIG_BASH_COMMAND

# Copyright 2014 Georgia Tech Research Corporation (GTRC). All rights reserved.

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

#HELP:COMMAND_NAME: Join arguments together as one big string

. "CONFIG_PREFIX"/lib/bash/common.bash
. "CONFIG_PREFIX"/lib/bash/opt_help.bash
. "CONFIG_PREFIX"/lib/bash/opt_verbose.bash
. "CONFIG_PREFIX"/lib/bash/fail.bash

#HELP:Options:
#HELP:  --help | -h: Print this help

#HELP:  --delimiter=$string | -d $string: Set string delimiter
unset delimiter
opt_delimiter () {
    (( $# == 1 )) || fail_assert "function requires one arg, \$delimiter"
    delimiter="$1"
}

OPTIND=1
while getopts :hd:-: option
do case "$option" in
       d ) opt_delimiter "$OPTARG";;
       h ) opt_help;;
       - ) case "$OPTARG" in
               delimiter=* ) opt_delimiter "${OPTARG#*=}";;
               help ) opt_help;;
               help=* ) fail "Long option \"${OPTARG%%=*}\" has unexpected argument";;
               delimiter ) fail "Long option \"$OPTARG\" missing argument ";;
               * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

[[ is-set = ${delimiter+is-set} ]] || fail "Option --delimiter is required"

if (( $# >= 1 ))
then printf "%s" "$1"
     for string in "${@:2}"
     do printf "%s%s" "$delimiter" "$string"
     done
fi

m4_dnl Local Variables:
m4_dnl mode: shell-script
m4_dnl eval: (sh-set-shell "bash")
m4_dnl indent-tabs-mode: nil
m4_dnl fill-column: 9999
m4_dnl End:
