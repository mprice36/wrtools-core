#!/bin/bash

# Copyright 2015 Georgia Tech Research Corporation (GTRC). All rights reserved.

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.

# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.

# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

#HELP:COMMAND_NAME: Convert files to good ASCII
#HELP:Usage: COMMAND_NAME $file

set -o nounset -o errexit

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/paranoia.bash

#HELP:Options:
#HELP:  --help | -h: Print this help
#HELP:  --verbose, -v: Print additional diagnostics
#HELP:  --not-paranoid: Omit basic/foundational validations

output=/dev/fd/1

opt_output () {
    (( $# == 1 )) || fail_assert "expected 1 arg (got $#)"
    output="$1"
}

OPTIND=1
while getopts :hko:v-: option
do case "$option" in
       h ) opt_help;;
       o ) opt_output "$OPTARG";;
       v ) opt_verbose;;
       - ) case "$OPTARG" in
               help ) opt_help;;
               not-paranoid ) opt_not_paranoid;;
               output=* ) opt_output "${OPTARG#*=}";;
               verbose ) opt_verbose;;
               help=* \
                 | not-paranoid=* \
                 | verbose=* )
                   fail "Long option \"${OPTARG%%=*}\" has unexpected argument";;
               output )
                   fail "Long option \"$OPTARG\" requires argument";;
               * ) fail "Unknown long option \"${OPTARG%%=*}\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail_assert "Bad state in getopts (OPTARG=\"$OPTARG\")";;
   esac
done
shift $((OPTIND-1))

vecho "output is $output"

(( $# == 1 )) || fail "expected 1 argument (got $#)"
! is_paranoid || [[ -f $1 && -r $1 ]] || fail "file must be a readable file: $1"

vecho "input is $1"

file_type=$(file --brief "$1")
vecho "file type is $file_type"

case $file_type in
    "ASCII text, with CR line terminators" )
        tr $'\r' $'\n' < "$1" > "$output";;
    "ASCII text, with CRLF line terminators" )
        sed -e 's/'$'\r''$//' < "$1" > "$output";;
    "ASCII text" )
        cat "$1" > "$output";;
    # Put additional conversions here!
    # Maybe use iconv
    * )
        fail "$1: Unknown input file type ($file_type)";;
esac
